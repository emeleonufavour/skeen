plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

project.ext.envConfigFiles = [
    debug: ".env.debug",
    release: ".env.release",
]

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.skeen.hack"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.skeen.hack"
        buildConfigField "String", "API_KEY", "\"${project.findProperty('API_KEY') ?: ''}\""
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

tasks.register('exportDartDefines') {
    doLast {
        // Get all --dart-define values
        def dartDefines = project.property('dart-defines') ?: []
        dartDefines.each { key ->
            // Decode base64
            def decoded = new String(key.decodeBase64())
            def (name, value) = decoded.split('=')
            if (name == 'API_KEY') {
                System.setProperty('DART_DEFINE_API_KEY', value)
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'prebuildRelease' || task.name == 'prebuildDebug') {
        task.dependsOn exportDartDefines
    }
}

flutter {
    source = "../.."
}
